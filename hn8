void hn8(double K,double a1,double a2,double a3,double a4,double a5,double a6,double a7,double a8,double b1,double b2,double b3,double b4,double b5,double b6, double b7, double b8, double H[1024][2]){


    float y_1=0, y_2=0, y_3=0, y_4=0, y_5=0, y_6=0, y_7=0, y_8=0; //Se inician las condiciones iniciales
    for(int i=0; i<1324; i++){
        H[i][IMAG] = 0;
        if(i<300){
            switch(i){
            case 0:
                H[i][REAL]= K; //k=0;
                break;
            case 1:
                H[i][REAL]= K*b1 - a1*y_1; //k=1;
                break;
            case 2:
                H[i][REAL]= K*b2 - a1*y_1 - a2*y_2; //k=2;
                break;
            case 3:
                H[i][REAL]= K*b3 - a1*y_1 - a2*y_2 - a3*y_3; //k=3;
                break;
            case 4:
                H[i][REAL]= K*b4 - a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4; //k=4;
                break;
            case 5:
                H[i][REAL]= K*b5 - a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4 - a5*y_5; //k=5;
                break;
            case 6:
                H[i][REAL]= K*b6 - a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4 - a5*y_5 - a6*y_6; //k=6;
                break;
            case 7:
                H[i][REAL]= K*b7 - a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4 - a5*y_5 - a6*y_6 - a7*y_7; //k=7;
                break;
            case 8:
                H[i][REAL]= K*b8 - a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4 - a5*y_5 - a6*y_6 - a7*y_7 - a8*y_8; //k=8;
                break;
            default:
                H[i][REAL]= -a1*y_1 - a2*y_2 - a3*y_3 - a4*y_4 - a5*y_5 - a6*y_6 - a7*y_7 - a8*y_8; //DespuÃ©s de k=8 hasta k=300;
                break;
            }

            // Se actualizan las condiciones iniciales
            y_8 = y_7;
            y_7 = y_6;
            y_6 = y_5;
            y_5 = y_4;
            y_4 = y_3;
            y_3 = y_2;
            y_2 = y_1;
            y_1 = H[i][REAL];
        }
        else{
            H[i][REAL]=0;
        }
    }

}

